*** NotificationManagerService.java.orig	2011-02-17 23:24:22.774703346 +0000
--- NotificationManagerService.java	2011-02-17 16:17:58.305953929 +0000
***************
*** 16,23 ****
  
  package com.android.server;
  
! import com.android.internal.statusbar.StatusBarNotification;
! import com.android.server.StatusBarManagerService;
  
  import android.app.ActivityManagerNative;
  import android.app.IActivityManager;
--- 16,27 ----
  
  package com.android.server;
  
! import java.io.FileDescriptor;
! import java.io.PrintWriter;
! import java.util.ArrayList;
! import java.util.Arrays;
! import java.util.concurrent.ExecutorService;
! import java.util.concurrent.Executors;
  
  import android.app.ActivityManagerNative;
  import android.app.IActivityManager;
***************
*** 42,55 ****
  import android.media.AudioManager;
  import android.net.Uri;
  import android.os.BatteryManager;
- import android.os.Build;
- import android.os.Bundle;
  import android.os.Binder;
! import android.os.Environment;
  import android.os.Handler;
  import android.os.IBinder;
  import android.os.Message;
  import android.os.Power;
  import android.os.Process;
  import android.os.RemoteException;
  import android.os.SystemProperties;
--- 46,58 ----
  import android.media.AudioManager;
  import android.net.Uri;
  import android.os.BatteryManager;
  import android.os.Binder;
! import android.os.Bundle;
  import android.os.Handler;
  import android.os.IBinder;
  import android.os.Message;
  import android.os.Power;
+ import android.os.PowerManager;
  import android.os.Process;
  import android.os.RemoteException;
  import android.os.SystemProperties;
***************
*** 58,85 ****
  import android.telephony.TelephonyManager;
  import android.text.TextUtils;
  import android.util.EventLog;
- import android.util.Slog;
  import android.util.Log;
! import java.util.Timer;
! import java.util.TimerTask;
  import android.view.accessibility.AccessibilityEvent;
  import android.view.accessibility.AccessibilityManager;
  import android.widget.Toast;
- import java.util.concurrent.Executors;
- import java.util.concurrent.ExecutorService;
- import android.os.PowerManager;
- 
- import java.io.File;
- import java.io.FileOutputStream;
- import java.io.FileWriter;
  
! import java.io.FileDescriptor;
! import java.io.PrintWriter;
! import java.util.ArrayList;
! import java.util.Arrays;
! import java.util.Calendar;
! import java.util.Random;
! import android.graphics.Color;
  
  /** {@hide} */
  public class NotificationManagerService extends INotificationManager.Stub
--- 61,73 ----
  import android.telephony.TelephonyManager;
  import android.text.TextUtils;
  import android.util.EventLog;
  import android.util.Log;
! import android.util.Slog;
  import android.view.accessibility.AccessibilityEvent;
  import android.view.accessibility.AccessibilityManager;
  import android.widget.Toast;
  
! import com.android.internal.statusbar.StatusBarNotification;
  
  /** {@hide} */
  public class NotificationManagerService extends INotificationManager.Stub
***************
*** 150,167 ****
      private int mBatteryLevel;
      private NotificationRecord mLedNotification;
  
-     private boolean mQuietHoursEnabled = false;
-     // Minutes from midnight when quiet hours begin.
-     private int mQuietHoursStart = 0;
-     // Minutes from midnight when quiet hours end.
-     private int mQuietHoursEnd = 0;
-     // Don't play sounds.
-     private boolean mQuietHoursMute = true;
-     // Don't vibrate.
-     private boolean mQuietHoursStill = true;
-     // Dim LED if hardware supports it.
-     private boolean mQuietHoursDim = true;
- 
      private static final int BATTERY_LOW_ARGB = 0xFFFF0000; // Charging Low - red solid on
      private static final int BATTERY_MEDIUM_ARGB = 0xFFFFFF00;    // Charging - orange solid on
      private static final int BATTERY_FULL_ARGB = 0xFF00FF00; // Charging Full - green solid on
--- 138,143 ----
***************
*** 171,177 ****
      private static ExecutorService threadExecutor;
      private static int mLastLight = 0;
      private static boolean isTimer = false;
-     private static boolean hasLights = false;
      private static PowerManager PowerMan;
      private static PowerManager.WakeLock powerWake = null;
      //private static ExecutorService threadExecutor;
--- 147,152 ----
***************
*** 189,198 ****
              c = baseContext;
          }
  
-         String pkg;
-         String type;
-         String name;
- 
          Resources r = c.getResources();
          try {
              return r.getResourceName(id);
--- 164,169 ----
***************
*** 208,215 ****
          final int id;
          final int uid;
          final int initialPid;
-         ITransientNotification callback;
-         int duration;
          final Notification notification;
          IBinder statusBarKey;
  
--- 179,184 ----
***************
*** 530,547 ****
                  updateAmberLight();
              }
  
-             mQuietHoursEnabled = Settings.System.getInt(resolver,
-                         Settings.System.QUIET_HOURS_ENABLED, 0) != 0;
-             mQuietHoursStart = Settings.System.getInt(resolver,
-                         Settings.System.QUIET_HOURS_START, 0);
-             mQuietHoursEnd = Settings.System.getInt(resolver,
-                         Settings.System.QUIET_HOURS_END, 0);
-             mQuietHoursMute = Settings.System.getInt(resolver,
-                         Settings.System.QUIET_HOURS_MUTE, 0) != 0;
-             mQuietHoursStill = Settings.System.getInt(resolver,
-                         Settings.System.QUIET_HOURS_STILL, 0) != 0;
-             mQuietHoursDim = Settings.System.getInt(resolver,
-                         Settings.System.QUIET_HOURS_DIM, 0) != 0;
          }
      }
  
--- 499,504 ----
***************
*** 867,873 ****
          }
  
          synchronized (mNotificationList) {
-             final boolean inQuietHours = inQuietHours();
  
              NotificationRecord r = new NotificationRecord(pkg, tag, id,
                      callingUid, callingPid, notification);
--- 824,829 ----
***************
*** 939,946 ****
                  // sound
                  final boolean useDefaultSound =
                      (notification.defaults & Notification.DEFAULT_SOUND) != 0;
!                 if (!(inQuietHours && mQuietHoursMute)
!                         && (useDefaultSound || notification.sound != null)) {
                      Uri uri;
                      if (useDefaultSound) {
                          uri = Settings.System.DEFAULT_NOTIFICATION_URI;
--- 895,901 ----
                  // sound
                  final boolean useDefaultSound =
                      (notification.defaults & Notification.DEFAULT_SOUND) != 0;
!                 if ((useDefaultSound || notification.sound != null)) {
                      Uri uri;
                      if (useDefaultSound) {
                          uri = Settings.System.DEFAULT_NOTIFICATION_URI;
***************
*** 971,978 ****
                  // vibrate
                  final boolean useDefaultVibrate =
                      (notification.defaults & Notification.DEFAULT_VIBRATE) != 0;
!                 if (!(inQuietHours && mQuietHoursStill)
!                         && (useDefaultVibrate || notification.vibrate != null)
                          && audioManager.shouldVibrate(AudioManager.VIBRATE_TYPE_NOTIFICATION)) {
                      mVibrateNotification = r;
  
--- 926,932 ----
                  // vibrate
                  final boolean useDefaultVibrate =
                      (notification.defaults & Notification.DEFAULT_VIBRATE) != 0;
!                 if ((useDefaultVibrate || notification.vibrate != null)
                          && audioManager.shouldVibrate(AudioManager.VIBRATE_TYPE_NOTIFICATION)) {
                      mVibrateNotification = r;
  
***************
*** 982,999 ****
                  }
              }
  
-             // Adjust the LED for quiet hours
-             if (inQuietHours && mQuietHoursDim) {
-                 // Cut all of the channels by a factor of 16 to dim on capable hardware.
-                 // Note that this should fail gracefully on other hardware.
-                 int argb = notification.ledARGB;
-                 int red = (((argb & 0xFF0000) >>> 16) >>> 4);
-                 int green = (((argb & 0xFF00) >>> 8 ) >>> 4);
-                 int blue = ((argb & 0xFF) >>> 4);
- 
-                 notification.ledARGB = (0xFF000000 | (red << 16) | (green << 8) | blue);
-             }
- 
              // light
              // the most recent thing gets the light
              mLights.remove(old);
--- 936,941 ----
***************
*** 1018,1050 ****
          idOut[0] = id;
      }
  
-     private boolean inQuietHours() {
-         if (mQuietHoursEnabled && (mQuietHoursStart != mQuietHoursEnd)) {
-             // Get the date in "quiet hours" format.
-             Calendar calendar = Calendar.getInstance();
-             int minutes = calendar.get(Calendar.HOUR_OF_DAY) * 60 + calendar.get(Calendar.MINUTE);
-             if (mQuietHoursEnd < mQuietHoursStart) {
-                 // Starts at night, ends in the morning.
-                 return (minutes > mQuietHoursStart) || (minutes < mQuietHoursEnd);
-             } else {
-                 return (minutes > mQuietHoursStart) && (minutes < mQuietHoursEnd);
-             }
-         }
-         return false;
-     }
- 
      private boolean checkLight(Notification notification, String pkg) {
-         String[] mPackage = findPackage(pkg);
          boolean flashLight = true;
          if(((notification.flags & Notification.FLAG_ONGOING_EVENT) != 0)
!                 || ((notification.flags & Notification.FLAG_FOREGROUND_SERVICE) != 0) ) {
              flashLight = false;
-         } else if(mPackage != null) {
-             if(mPackage[1].equals("none"))
-                 flashLight = false;
          }
          return flashLight;
!    }
  
  
      private void sendAccessibilityEvent(Notification notification, CharSequence packageName) {
--- 960,974 ----
          idOut[0] = id;
      }
  
      private boolean checkLight(Notification notification, String pkg) {
          boolean flashLight = true;
          if(((notification.flags & Notification.FLAG_ONGOING_EVENT) != 0)
!                 || ((notification.flags & Notification.FLAG_FOREGROUND_SERVICE) != 0)
!                 || ((notification.flags & Notification.FLAG_SHOW_LIGHTS) == 0) ) {
              flashLight = false;
          }
          return flashLight;
!     }
  
  
      private void sendAccessibilityEvent(Notification notification, CharSequence packageName) {
***************
*** 1274,1305 ****
          return temp;
      }
  
-     public String[] getPackageInfo(String mString) {
-         if (mString == null || mString == "=" || mString.length() == 0) {
-             return null;
-         }
-         String[] temp;
-         temp = mString.split("=");
-         return temp;
-     }
- 
-     public String[] findPackage(String pkg) {
-         String mBaseString = Settings.System.getString(mContext.getContentResolver(),
-                 Settings.System.NOTIFICATION_PACKAGE_COLORS);
-         String[] mBaseArray = getArray(mBaseString);
-         if (mBaseArray == null)
-             return null;
-         for (int i = 0; i < mBaseArray.length; i++) {
-             if (isNull(mBaseArray[i])) {
-                 continue;
-             }
-             if (mBaseArray[i].contains(pkg)) {
-                 return getPackageInfo(mBaseArray[i]);
-             }
-         }
-         return null;
-     }
- 
      public class StartTimerClass implements Runnable {
          private long sleepTimer;
  
--- 1198,1203 ----
***************
*** 1319,1409 ****
          }
      }
  
- 
-     private int lastColor = 1;
- 
-     private String[] colorList = {
-             "green", "white", "red", "blue", "yellow", "cyan", "#800080", "#ffc0cb", "#ffa500",
-             "#add8e6"
-     };
- 
      public void newExecutor() {
          threadExecutor = Executors.newSingleThreadExecutor();
      }
  
      private int getLedARGB(NotificationRecord sLight) {
          int rledARGB = sLight.notification.ledARGB;
-         int mRandomColor = Settings.System.getInt(mContext.getContentResolver(),
-                 Settings.System.TRACKBALL_NOTIFICATION_RANDOM, 0);
-         int mPulseAllColor = Settings.System.getInt(mContext.getContentResolver(),
-                 Settings.System.TRACKBALL_NOTIFICATION_PULSE_ORDER, 0);
-         int mBlendColor = Settings.System.getInt(mContext.getContentResolver(),
-                 Settings.System.TRACKBALL_NOTIFICATION_BLEND_COLOR, 0);
  
          if ((sLight.notification.defaults & Notification.DEFAULT_LIGHTS) != 0) {
                  rledARGB = mDefaultNotificationColor;
          }
  
-         String[] mPackageInfo = findPackage(sLight.pkg);
-         if (mPackageInfo != null) {
-             if (!mPackageInfo[1].equals("none")) {
-                 if (mPackageInfo[1].equals("random")) {
-                     Random generator = new Random();
-                     int x = generator.nextInt(colorList.length - 1);
-                     rledARGB = Color.parseColor(colorList[x]);
-                 } else {
-                     rledARGB = Color.parseColor(mPackageInfo[1]);
-                 }
-             }
-         }
- 
-         if (mRandomColor == 1) {
-             // Lets make this intresting...
-             Random generator = new Random();
-             int x = generator.nextInt(colorList.length - 1);
-             rledARGB = Color.parseColor(colorList[x]);
-         } else if (mPulseAllColor == 1) {
-             if (lastColor >= colorList.length) {
-                 lastColor = 1;
-             }
- 
-             rledARGB = Color.parseColor(colorList[lastColor - 1]);
-             lastColor = lastColor + 1;
-         } else if (mBlendColor == 1) { // Blend lights: Credit to eshabtai
-                                        // for the application of this.
-             rledARGB = 0;
-             for (NotificationRecord light : mLights) {
-                 mPackageInfo = findPackage(light.pkg);
-                 if (mPackageInfo != null) {
-                     if (mPackageInfo[1].equals("random")) {
-                         Random generator = new Random();
-                         int j = generator.nextInt(colorList.length - 1);
-                         rledARGB |= Color.parseColor(colorList[j]);
-                     } else {
-                         rledARGB |= Color.parseColor(mPackageInfo[1]);
-                     }
-                 } else if ((light.notification.defaults & Notification.DEFAULT_LIGHTS) != 0) {
-                     rledARGB |= light.notification.ledARGB;
-                 }
-             }
-             if (rledARGB == 0) {
-                 rledARGB = mDefaultNotificationColor;
-             }
-         }
- 
-         // Adjust the LED for quiet hours
-         if (inQuietHours() && mQuietHoursDim) {
-             // Cut all of the channels by a factor of 16 to dim on capable
-             // hardware.
-             // Note that this should fail gracefully on other hardware.
-             int argb = rledARGB;
-             int red = (((argb & 0xFF0000) >>> 16) >>> 4);
-             int green = (((argb & 0xFF00) >>> 8) >>> 4);
-             int blue = ((argb & 0xFF) >>> 4);
- 
-             rledARGB = (0xFF000000 | (red << 16) | (green << 8) | blue);
-         }
- 
          return rledARGB;
      }
  
--- 1217,1233 ----
***************
*** 1417,1442 ****
      }
  
      private void updateRGBLightsLocked() {
-         boolean SHOLES_DEVICE = Build.DEVICE.contains("sholes");
          int mPulseScreen = Settings.System.getInt(mContext.getContentResolver(),
                  Settings.System.TRACKBALL_SCREEN_ON, 0);
          int mSuccession = Settings.System.getInt(mContext.getContentResolver(),
                  Settings.System.TRACKBALL_NOTIFICATION_SUCCESSION, 0);
-         int mRandomColor = Settings.System.getInt(mContext.getContentResolver(),
-                 Settings.System.TRACKBALL_NOTIFICATION_RANDOM, 0);
-         int mPulseAllColor = Settings.System.getInt(mContext.getContentResolver(),
-                 Settings.System.TRACKBALL_NOTIFICATION_PULSE_ORDER, 0);
-         int mBlendColor = Settings.System.getInt(mContext.getContentResolver(),
-                 Settings.System.TRACKBALL_NOTIFICATION_BLEND_COLOR, 0);
  
!         if (mBatteryLevel <= 15 || (mBlendColor == 1)) {
              mSuccession = 0;
-             mRandomColor = 0;
-             mPulseAllColor = 0;
-         }
- 
-         if (SHOLES_DEVICE) {
-             mBlendColor = 0;
          }
  
          // Battery low always shows, other states only show if charging.
--- 1241,1253 ----
      }
  
      private void updateRGBLightsLocked() {
          int mPulseScreen = Settings.System.getInt(mContext.getContentResolver(),
                  Settings.System.TRACKBALL_SCREEN_ON, 0);
          int mSuccession = Settings.System.getInt(mContext.getContentResolver(),
                  Settings.System.TRACKBALL_NOTIFICATION_SUCCESSION, 0);
  
!         if (mBatteryLevel <= 15 ) {
              mSuccession = 0;
          }
  
          // Battery low always shows, other states only show if charging.
***************
*** 1505,1524 ****
                  ledOffMS = mDefaultNotificationLedOff;
              }
  
-             String[] mPackageInfo = findPackage(mLedNotification.pkg);
-             if (mPackageInfo != null) {
-                 if (!mPackageInfo[1].equals("none")) {
-                     if (mPackageInfo[2].equals(".5")) {
-                         ledOffMS = 500;
-                     } else {
-                         ledOffMS = (Integer.parseInt(mPackageInfo[2]) * 1000);
-                     }
-                 }
-             }
- 
              if (mNotificationPulseEnabled) {
                  // pulse repeatedly
!                 if ((mSuccession == 1) || (mRandomColor == 1) || (mPulseAllColor == 1)) {
                      /* Our wake lock information to keep us alive */
                      if (powerWake == null) {
                          PowerMan = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
--- 1316,1324 ----
                  ledOffMS = mDefaultNotificationLedOff;
              }
  
              if (mNotificationPulseEnabled) {
                  // pulse repeatedly
!                 if (mSuccession == 1) {
                      /* Our wake lock information to keep us alive */
                      if (powerWake == null) {
                          PowerMan = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
***************
*** 1563,1572 ****
          }
  
          boolean greenOn = mGreenLightOn;
-         final boolean inQuietHours = inQuietHours();
  
          // disable light if screen is on and "always show" is off
!         if (mLedNotification == null || mInCall || inQuietHours
                  || (mScreenOn && !mNotificationAlwaysOnEnabled)) {
              mNotificationLight.turnOff();
              mGreenLightOn = false;
--- 1363,1371 ----
          }
  
          boolean greenOn = mGreenLightOn;
  
          // disable light if screen is on and "always show" is off
!         if (mLedNotification == null || mInCall 
                  || (mScreenOn && !mNotificationAlwaysOnEnabled)) {
              mNotificationLight.turnOff();
              mGreenLightOn = false;
***************
*** 1589,1599 ****
      private void updateAmberLight() {
          // disable LED if green LED is already on
          if (!mGreenLightOn && !mInCall) {
-             final boolean inQuietHours = inQuietHours();
  
              // enable amber only if low battery and not charging or charging
              // and notification enabled
!             if (!inQuietHours && ((mBatteryLow && !mBatteryCharging) ||
                      (mBatteryCharging && mNotificationChargingEnabled && !mBatteryFull))) {
                  mBatteryLight.setColor(0xFFFFFF00);
                  return;
--- 1388,1397 ----
      private void updateAmberLight() {
          // disable LED if green LED is already on
          if (!mGreenLightOn && !mInCall) {
  
              // enable amber only if low battery and not charging or charging
              // and notification enabled
!             if ( ((mBatteryLow && !mBatteryCharging) ||
                      (mBatteryCharging && mNotificationChargingEnabled && !mBatteryFull))) {
                  mBatteryLight.setColor(0xFFFFFF00);
                  return;
